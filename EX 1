def is_safe(board, row, col):
    # Check the column
    for i in range(row):
        if board[i] == col or \
           board[i] - i == col - row or \
           board[i] + i == col + row:
            return False
    return True

def solve_n_queens(board, row):
    if row == len(board):
        print_board(board)
        return True
    res = False
    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row] = col
            res = solve_n_queens(board, row + 1) or res
            # Backtrack
            board[row] = -1
    return res

def print_board(board):
    for row in board:
        line = ['Q' if col == row else '.' for col in range(len(board))]
        print(" ".join(line))
    print("\n")

def solve_8_queens():
    board = [-1] * 8  # Initialize an empty 8x8 board with -1 (no queen placed)
    solve_n_queens(board, 0)

# Call the function to solve the 8-Queens problem
solve_8_queens()
