# A simple example of the Minimax algorithm in Python

# A utility function to implement the Minimax algorithm
def minimax(node, depth, is_maximizing_player):
    # If the node is a terminal node (depth 0), return its value
    if depth == 0:
        return node['value']
    
    # If it's Maximizer's turn
    if is_maximizing_player:
        best_value = -float('inf')  # Initialize with negative infinity
        for child in node['children']:
            value = minimax(child, depth - 1, False)  # Minimize on the next level
            best_value = max(best_value, value)  # Maximizer chooses the maximum value
        return best_value
    
    # If it's Minimizer's turn
    else:
        best_value = float('inf')  # Initialize with positive infinity
        for child in node['children']:
            value = minimax(child, depth - 1, True)  # Maximize on the next level
            best_value = min(best_value, value)  # Minimizer chooses the minimum value
        return best_value

# Example game tree
game_tree = {
    'value': None,  # Root node (Maximizer's turn)
    'children': [
        {
            'value': None,  # Minimizer's turn
            'children': [
                {'value': 3, 'children': []},  # Maximizer's turn
                {'value': 12, 'children': []},  # Maximizer's turn
            ]
        },
        {
            'value': None,  # Minimizer's turn
            'children': [
                {'value': 8, 'children': []},  # Maximizer's turn
                {'value': 2, 'children': []},  # Maximizer's turn
            ]
        },
        {
            'value': None,  # Minimizer's turn
            'children': [
                {'value': 4, 'children': []},  # Maximizer's turn
                {'value': 6, 'children': []},  # Maximizer's turn
            ]
        },
        {
            'value': None,  # Minimizer's turn
            'children': [
                {'value': 14, 'children': []},  # Maximizer's turn
                {'value': 10, 'children': []},  # Maximizer's turn
            ]
        }
    ]
}

# Running the minimax algorithm starting from the root
# The depth of the tree is 3 (3 layers of decisions)
result = minimax(game_tree, 3, True)

# Output the result
print(f"The optimal value for Maximizer is: {result}")
